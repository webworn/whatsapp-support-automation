// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Business owner authentication (single user per deployment)
model User {
  id                   String   @id @default(uuid())
  email                String   @unique
  passwordHash         String   @map("password_hash")
  businessName         String   @map("business_name")
  whatsappPhoneNumber  String?  @map("whatsapp_phone_number")
  aiModelPreference    String   @default("claude-haiku") @map("ai_model_preference")
  subscriptionTier     String   @default("starter") @map("subscription_tier")
  isEmailVerified      Boolean  @default(false) @map("is_email_verified")
  lastLoginAt          DateTime? @map("last_login_at")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  conversations Conversation[]
  documents     Document[]
  promptTemplates PromptTemplate[]
  userSessions  UserSession[]

  @@map("users")
}

// User sessions for JWT management
model UserSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tokenHash String   @unique @map("token_hash")
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

// Customer conversations (WhatsApp customers)
model Conversation {
  id               String    @id @default(uuid())
  userId           String    @map("user_id") // Business owner
  customerPhone    String    @map("customer_phone")
  customerName     String?   @map("customer_name")
  status           String    @default("active") // active, closed, archived
  aiEnabled        Boolean   @default(true) @map("ai_enabled")
  lastMessageAt    DateTime  @default(now()) @map("last_message_at")
  metadata         String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId])
  @@index([customerPhone])
  @@index([status])
  @@index([lastMessageAt])
  @@map("conversations")
}

// Message history for conversations
model Message {
  id               String    @id @default(uuid())
  conversationId   String    @map("conversation_id")
  content          String
  senderType       String    @map("sender_type") // customer, ai, agent
  whatsappMessageId String?  @unique @map("whatsapp_message_id")
  messageType      String    @default("text") @map("message_type") // text, image, document, audio
  aiModelUsed      String?   @map("ai_model_used")
  processingTimeMs Int?      @map("processing_time_ms")
  deliveryStatus   String    @default("pending") @map("delivery_status") // pending, sent, delivered, read, failed
  metadata         String?
  timestamp        DateTime  @default(now())
  createdAt        DateTime  @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deliveryUpdates MessageDeliveryUpdate[]

  @@index([conversationId])
  @@index([timestamp])
  @@index([senderType])
  @@index([deliveryStatus])
  @@map("messages")
}

// Message delivery status tracking
model MessageDeliveryUpdate {
  id                String   @id @default(uuid())
  messageId         String   @map("message_id")
  whatsappMessageId String   @map("whatsapp_message_id")
  status            String   // sent, delivered, read, failed
  timestamp         DateTime @default(now())
  recipientId       String?  @map("recipient_id")
  errorCode         String?  @map("error_code")
  errorMessage      String?  @map("error_message")
  createdAt         DateTime @default(now()) @map("created_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([whatsappMessageId])
  @@index([status])
  @@index([timestamp])
  @@map("message_delivery_updates")
}

// Knowledge base documents (max 50 per user)
model Document {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  filename     String
  originalName String   @map("original_name")
  fileType     String   @map("file_type") // pdf, txt, doc, docx
  fileSize     Int      @map("file_size")
  content      String   // extracted text content
  status       String   @default("ready") // processing, ready, error
  category     String?
  tags         String? // Comma-separated tags
  uploadDate   DateTime @default(now()) @map("upload_date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([fileType])
  @@map("documents")
}

// AI prompt templates
model PromptTemplate {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String
  description String?
  template    String
  category    String   // industry category
  variables   String? // JSON string of template variables like ["customerName", "businessName"]
  isActive    Boolean  @default(false) @map("is_active")
  isSystem    Boolean  @default(false) @map("is_system") // built-in templates
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([isActive])
  @@map("prompt_templates")
}

// Simple analytics tracking (not for billing)
model AnalyticsSummary {
  id                   String   @id @default(uuid())
  userId               String   @map("user_id")
  date                 DateTime
  totalMessages        Int      @default(0) @map("total_messages")
  aiResponses          Int      @default(0) @map("ai_responses")
  manualResponses      Int      @default(0) @map("manual_responses")
  activeConversations  Int      @default(0) @map("active_conversations")
  avgResponseTimeMs    Int      @default(0) @map("avg_response_time_ms")
  createdAt            DateTime @default(now()) @map("created_at")

  @@unique([userId, date])
  @@map("analytics_summary")
}

// Keep existing webhook logs for debugging
model WebhookLog {
  id        String   @id @default(uuid())
  source    String   // whatsapp, manual, etc.
  payload   String
  signature String?
  isValid   Boolean  @map("is_valid")
  processed Boolean  @default(false)
  error     String?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([source])
  @@index([createdAt])
  @@map("webhook_logs")
}